diff --git a/source/GDOptimizer.cpp b/source/GDOptimizer.cpp
index 8749ab8..842c577 100644
--- a/source/GDOptimizer.cpp
+++ b/source/GDOptimizer.cpp
@@ -3,6 +3,29 @@
 
 #include <cmath>
 
+namespace
+{
+
+std::vector<float> get_gradient(Node& node)
+{
+  std::vector<float> gradient;
+	for (size_t i = 0; i < node.param_count(); ++i) {
+    gradient.push_back(*node.gradient(i));
+	}
+  return gradient;
+}
+
+num_t get_l2_norm_squared(const std::vector<num_t>& gradient)
+{
+  num_t l2_squared = 0;
+  for (const num_t g : gradient) {
+    l2_squared += g * g;
+  }
+  return l2_squared;
+}
+
+}
+
 GDOptimizer::GDOptimizer(num_t eta)
 	: eta_{ eta }
 {
@@ -10,15 +33,28 @@ GDOptimizer::GDOptimizer(num_t eta)
 }
 
 void GDOptimizer::train(Node& node) {
+  // Gradient clipping (/ rescaling).
+  auto gradient = get_gradient(node);
+  num_t l2_squared = get_l2_norm_squared(gradient);
+  if(l2_squared > 100)
+  {
+    num_t l2_norm = 1.0/std::sqrt(l2_squared);
+    for (size_t i = 0; i < node.param_count(); ++i)
+    {
+      gradient[i] *= l2_norm;
+    }
+  }
+
+  // Update parameters using the gradient and learning rate eta.
 	size_t param_count = node.param_count();
-	for (size_t i = 0; i != param_count; ++i) {
+	for (size_t i = 0; i < gradient.size(); ++i)
+  {
 		num_t& param = *node.param(i);
-		num_t& gradient = *node.gradient(i);
 
-		param = param - eta_ * gradient;
+		param = param - eta_ * gradient[i];
 
 		// Reset the gradient which will be accumulated again in the next
 		// training epoch
-		gradient = num_t{ 0.0 };
+		*node.gradient(i) = num_t{ 0.0 };
 	}
 }
\ No newline at end of file
diff --git a/source/main.cpp b/source/main.cpp
index 1479955..751bb97 100644
--- a/source/main.cpp
+++ b/source/main.cpp
@@ -27,8 +27,12 @@ std::string filepath_generator(char* argv[], std::string folder, std::string fil
 
 std::string MNIST_data_filepath(char* argv[], std::string filename) {
 	// This function is used to find the path to the MNIST data files.
-	std::string path = filepath_generator(argv, "MNIST_dataset\\", filename);
-	return path;
+#if defined(WIN32) || defined(_WIN32) 
+  std::string folder = "MNIST_dataset\\";
+#else
+  std::string folder = "MNIST_dataset/";
+#endif
+	return filepath_generator(argv, folder, filename);
 }
 
 std::ifstream open_file(std::string file_path) {
